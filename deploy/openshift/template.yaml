kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: onguard
labels:
  template: onguard
objects:
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: '${SERVICE_ACCOUNT_NAME}'
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${SERVICE_NAME}'
      labels:
        app-name: '${APP_NAME}'
    spec:
      ports:
        - name: http
          protocol: TCP
          appProtocol: http
          port: '${{SERVICE_PORT}}'
          targetPort: http
        - name: management
          protocol: TCP
          appProtocol: http
          port: '${{MANAGEMENT_PORT}}'
          targetPort: management
      selector:
        app: '${APP_NAME}'
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: '${APP_NAME}'
    spec:
      replicas: '${{REPLICAS}}'
      selector:
        matchLabels:
          app: '${APP_NAME}'
      template:
        metadata:
          labels:
            app: '${APP_NAME}'
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: kubernetes.io/hostname
                  weight: 90
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: topology.kubernetes.io/zone
                  weight: 100
          containers:
            - name: app
              image: '${IMAGE}:${IMAGE_TAG}'
              livenessProbe:
                httpGet:
                  path: /q/health/live
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 15
                periodSeconds: 20
              readinessProbe:
                httpGet:
                  path: /q/health/ready
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 5
                periodSeconds: 10
              ports:
                - name: http
                  containerPort: '${{SERVICE_PORT}}'
                  protocol: TCP
                - name: management
                  containerPort: '${{MANAGEMENT_PORT}}'
                  protocol: TCP
              env:
                - name: API_NVD_APIKEY
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: api-nvd-apikey
                - name: DB_REDIS_HOST
                  valueFrom:
                    secretKeyRef:
                      name: '${ELASTICACHE_SECRET}'
                      key: db.endpoint
                - name: DB_REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: '${ELASTICACHE_SECRET}'
                      key: db.port
                - name: QUARKUS_HTTP_PORT
                  value: '8080'
                - name: QUARKUS_MANAGEMENT_PORT
                  value: '9000'
              securityContext:
                runAsNonRoot: true
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              imagePullPolicy: Always
          restartPolicy: Always
          serviceAccountName: '${SERVICE_ACCOUNT_NAME}'
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: sync-nvd-script
    data:
      sync.sh: |
        #!/bin/bash

        set -euo pipefail

        status_code=$(curl --write-out '%{http_code}' --silent --output /dev/null http://${SERVICE_NAME}:${MANAGEMENT_PORT}/load)

        if [ ${status_code} == '404' ]; then
            echo Load data is empty
            curl -XPOST http://${SERVICE_NAME}:${MANAGEMENT_PORT}/load
        elif [ ${status_code} == '200' ]; then
            load=$(curl -s http://${SERVICE_NAME}:${MANAGEMENT_PORT}/load)
            echo ${load}
            if [[ $load == *"completed"* ]]; then
                completed=$(echo "$load" | sed -E 's/.*"completed":"?([^,"]*)"?.*/\1/')
                echo "Completed load on ${completed}. Sync with most recent data"
                curl -XPOST http://${SERVICE_NAME}:${MANAGEMENT_PORT}/load?since=${completed}
            else
                echo "Load not yet completed"
            fi
        else
            echo "Unexpected status code ${status_code}. Skip load and sync."
        fi
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: sync-nvd-db
    spec:
      schedule: "0 */2 * * *"
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: sync
                  image: registry.redhat.io/ubi9-minimal:9.3-1552
                  imagePullPolicy: IfNotPresent
                  command:
                    - /bin/sh
                    - /scripts/sync.sh
                  volumeMounts:
                    - name: script-cm
                      mountPath: /scripts
              volumes:
                - name: script-cm
                  configMap:
                    name: sync-nvd-script
                    defaultMode: 0777
              restartPolicy: OnFailure
parameters:
  - name: APP_NAME
    displayName: Application name
    description: Application name
    value: onguard
    required: true
  - name: REPLICAS
    displayName: Replicas
    description: Number of desired pods
    value: '1'
    required: true
  - name: IMAGE
    displayName: Container image name
    description: Container image name
    value: quay.io/ecosystem-appeng/onguard
    required: true
  - name: IMAGE_TAG
    displayName: Container image tag
    description: Container image tag
    value: latest
    required: true
  - name: SERVICE_ACCOUNT_NAME
    displayName: ServiceAccount name
    description: The name of the ServiceAccount to use to run this pod.
    value: onguard-sa
  - name: ELASTICACHE_SECRET
    displayName: Elasticache Secret
    description: Name of the secret containing the Elasticache settings
    value: exhort-elasticache
    required: true
  - name: SERVICE_NAME
    displayName: Service name
    description: Service name
    value: onguard
    required: true
  - name: SERVICE_PORT
    displayName: Service port
    description: Service port
    value: '8080'
    required: true
  - name: MANAGEMENT_PORT
    displayName: Management port
    description: Management port for exposing health and metrics
    value: '9000'
    required: true
  - name: CPU_REQUEST
    description: The minimum amount of CPU required by a container
    displayName: Memory Limit
    required: true
    value: 100m
  - name: CPU_LIMIT
    description: The maximum amount of CPU the container can use.
    displayName: Memory Limit
    required: true
    value: 500m
  - name: MEMORY_REQUEST
    description: The minimum amount of memory required by a container
    displayName: Memory Limit
    required: true
    value: 10Mi
  - name: MEMORY_LIMIT
    description: The maximum amount of memory the container can use.
    displayName: Memory Limit
    required: true
    value: 1024Mi
  - name: ENV_NAME
    value: stage
    displayName: Environment (default -- stage)
    description: 'Application environment'
  - name: PROJECT_NAME
    value: trusted-content-onguard-stage
    displayName: Project name (default -- trusted-content-onguard-stage)
    description: 'Project name'
